{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction EmployeeFormComponent_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EmployeeFormComponent_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Name must be at least 3 characters long. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EmployeeFormComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, EmployeeFormComponent_div_5_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵtemplate(2, EmployeeFormComponent_div_5_div_2_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.name.errors == null ? null : ctx_r0.name.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.name.errors == null ? null : ctx_r0.name.errors[\"minlength\"]);\n  }\n}\nfunction EmployeeFormComponent_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Position is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EmployeeFormComponent_div_10_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Position must be at least 5 characters long. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EmployeeFormComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, EmployeeFormComponent_div_10_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵtemplate(2, EmployeeFormComponent_div_10_div_2_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.position.errors == null ? null : ctx_r1.position.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.position.errors == null ? null : ctx_r1.position.errors[\"minlength\"]);\n  }\n}\nexport class EmployeeFormComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.initialState = new BehaviorSubject({});\n    this.formValuesChanged = new EventEmitter();\n    this.formSubmitted = new EventEmitter();\n    this.employeeForm = new FormGroup({});\n  }\n  get name() {\n    return this.employeeForm.get('name');\n  }\n  get position() {\n    return this.employeeForm.get('position');\n  }\n  get level() {\n    return this.employeeForm.get('level');\n  }\n  ngOnInit() {\n    this.initialState.subscribe(employee => {\n      this.employeeForm = this.fb.group({\n        name: [employee.name, [Validators.required]],\n        position: [employee.position, [Validators.required, Validators.minLength(5)]],\n        level: [employee.level, [Validators.required]]\n      });\n    });\n    this.employeeForm.valueChanges.subscribe(val => {\n      this.formValuesChanged.emit(val);\n    });\n  }\n  submitForm() {\n    this.formSubmitted.emit(this.employeeForm.value);\n  }\n}\nEmployeeFormComponent.ɵfac = function EmployeeFormComponent_Factory(t) {\n  return new (t || EmployeeFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nEmployeeFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EmployeeFormComponent,\n  selectors: [[\"app-employee-form\"]],\n  inputs: {\n    initialState: \"initialState\"\n  },\n  outputs: {\n    formValuesChanged: \"formValuesChanged\",\n    formSubmitted: \"formSubmitted\"\n  },\n  decls: 26,\n  vars: 4,\n  consts: [[\"autocomplete\", \"off\", 1, \"employee-form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-floating\", \"mb-3\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", \"placeholder\", \"Name\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"name\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"position\", \"placeholder\", \"Position\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"position\"], [1, \"mb-3\"], [1, \"form-check\"], [\"type\", \"radio\", \"formControlName\", \"level\", \"name\", \"level\", \"id\", \"level-junior\", \"value\", \"junior\", \"required\", \"\", 1, \"form-check-input\"], [\"for\", \"level-junior\", 1, \"form-check-label\"], [\"type\", \"radio\", \"formControlName\", \"level\", \"name\", \"level\", \"id\", \"level-mid\", \"value\", \"mid\", 1, \"form-check-input\"], [\"for\", \"level-mid\", 1, \"form-check-label\"], [\"type\", \"radio\", \"formControlName\", \"level\", \"name\", \"level\", \"id\", \"level-senior\", \"value\", \"senior\", 1, \"form-check-input\"], [\"for\", \"level-senior\", 1, \"form-check-label\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"alert\", \"alert-danger\"], [4, \"ngIf\"]],\n  template: function EmployeeFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function EmployeeFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"input\", 2);\n      i0.ɵɵelementStart(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Name\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(5, EmployeeFormComponent_div_5_Template, 3, 2, \"div\", 4);\n      i0.ɵɵelementStart(6, \"div\", 1);\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵelementStart(8, \"label\", 6);\n      i0.ɵɵtext(9, \"Position\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, EmployeeFormComponent_div_10_Template, 3, 2, \"div\", 4);\n      i0.ɵɵelementStart(11, \"div\", 7)(12, \"div\", 8);\n      i0.ɵɵelement(13, \"input\", 9);\n      i0.ɵɵelementStart(14, \"label\", 10);\n      i0.ɵɵtext(15, \"Junior\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 8);\n      i0.ɵɵelement(17, \"input\", 11);\n      i0.ɵɵelementStart(18, \"label\", 12);\n      i0.ɵɵtext(19, \"Mid\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"div\", 8);\n      i0.ɵɵelement(21, \"input\", 13);\n      i0.ɵɵelementStart(22, \"label\", 14);\n      i0.ɵɵtext(23, \"Senior\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(24, \"button\", 15);\n      i0.ɵɵtext(25, \"Add\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.employeeForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.name.invalid && (ctx.name.dirty || ctx.name.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.position.invalid && (ctx.position.dirty || ctx.position.touched));\n      i0.ɵɵadvance(14);\n      i0.ɵɵproperty(\"disabled\", ctx.employeeForm.invalid);\n    }\n  },\n  dependencies: [i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\".employee-form[_ngcontent-%COMP%] {\\n     max-width: 560px;\\n     margin-left: auto;\\n     margin-right: auto;\\n   }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZW1wbG95ZWUtZm9ybS9lbXBsb3llZS1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtLQUNLLGdCQUFnQjtLQUNoQixpQkFBaUI7S0FDakIsa0JBQWtCO0dBQ3BCIiwic291cmNlc0NvbnRlbnQiOlsiLmVtcGxveWVlLWZvcm0ge1xuICAgICBtYXgtd2lkdGg6IDU2MHB4O1xuICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgfSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","FormGroup","Validators","BehaviorSubject","i0","EmployeeFormComponent","constructor","fb","name","employeeForm","get","position","level","ngOnInit","initialState","subscribe","employee","group","required","minLength","valueChanges","val","formValuesChanged","emit","submitForm","formSubmitted","value","selectors","inputs","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["F:\\Full stack devolopment 2\\mean-stack\\mean-stack-example\\client\\src\\app\\employee-form\\employee-form.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { Employee } from '../employee';\n \n@Component({\n selector: 'app-employee-form',\n template: `\n   <form class=\"employee-form\" autocomplete=\"off\" [formGroup]=\"employeeForm\" (ngSubmit)=\"submitForm()\">\n     <div class=\"form-floating mb-3\">\n       <input class=\"form-control\" type=\"text\" id=\"name\" formControlName=\"name\" placeholder=\"Name\" required>\n       <label for=\"name\">Name</label>\n     </div>\n \n     <div *ngIf=\"name.invalid && (name.dirty || name.touched)\" class=\"alert alert-danger\">\n       <div *ngIf=\"name.errors?.['required']\">\n         Name is required.\n       </div>\n       <div *ngIf=\"name.errors?.['minlength']\">\n         Name must be at least 3 characters long.\n       </div>\n     </div>\n \n     <div class=\"form-floating mb-3\">\n       <input class=\"form-control\" type=\"text\" formControlName=\"position\" placeholder=\"Position\" required>\n       <label for=\"position\">Position</label>\n     </div>\n \n     <div *ngIf=\"position.invalid && (position.dirty || position.touched)\" class=\"alert alert-danger\">\n \n       <div *ngIf=\"position.errors?.['required']\">\n         Position is required.\n       </div>\n       <div *ngIf=\"position.errors?.['minlength']\">\n         Position must be at least 5 characters long.\n       </div>\n     </div>\n \n     <div class=\"mb-3\">\n       <div class=\"form-check\">\n         <input class=\"form-check-input\" type=\"radio\" formControlName=\"level\" name=\"level\" id=\"level-junior\" value=\"junior\" required>\n         <label class=\"form-check-label\" for=\"level-junior\">Junior</label>\n       </div>\n       <div class=\"form-check\">\n         <input class=\"form-check-input\" type=\"radio\" formControlName=\"level\" name=\"level\" id=\"level-mid\" value=\"mid\">\n         <label class=\"form-check-label\" for=\"level-mid\">Mid</label>\n       </div>\n       <div class=\"form-check\">\n         <input class=\"form-check-input\" type=\"radio\" formControlName=\"level\" name=\"level\" id=\"level-senior\"\n           value=\"senior\">\n         <label class=\"form-check-label\" for=\"level-senior\">Senior</label>\n       </div>\n     </div>\n \n     <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"employeeForm.invalid\">Add</button>\n   </form>\n `,\n styles: [\n   `.employee-form {\n     max-width: 560px;\n     margin-left: auto;\n     margin-right: auto;\n   }`\n ]\n})\nexport class EmployeeFormComponent implements OnInit {\n @Input()\n initialState: BehaviorSubject<Employee> = new BehaviorSubject({});\n \n @Output()\n formValuesChanged = new EventEmitter<Employee>();\n \n @Output()\n formSubmitted = new EventEmitter<Employee>();\n \n employeeForm: FormGroup = new FormGroup({});\n \n constructor(private fb: FormBuilder) { }\n \n get name() { return this.employeeForm.get('name')!; }\n get position() { return this.employeeForm.get('position')!; }\n get level() { return this.employeeForm.get('level')!; }\n \n ngOnInit() {\n   this.initialState.subscribe(employee => {\n     this.employeeForm = this.fb.group({\n       name: [ employee.name, [Validators.required] ],\n       position: [ employee.position, [ Validators.required, Validators.minLength(5) ] ],\n       level: [ employee.level, [Validators.required] ]\n     });\n   });\n \n   this.employeeForm.valueChanges.subscribe((val) => { this.formValuesChanged.emit(val); });\n }\n \n submitForm() {\n   this.formSubmitted.emit(this.employeeForm.value);\n }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}