{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../user.service\";\nexport class RegisterComponent {\n  constructor(fb, router, userService) {\n    this.fb = fb;\n    this.router = router;\n    this.userService = userService;\n    this.initialState = new BehaviorSubject({});\n    this.formValuesChanged = new EventEmitter();\n    this.formSubmitted = new EventEmitter();\n    this.registerForm = new FormGroup({});\n  }\n  get name() {\n    return this.registerForm.get('name');\n  }\n  get phoneNumber() {\n    return this.registerForm.get('phoneNumber');\n  }\n  get email() {\n    return this.registerForm.get('email');\n  }\n  get password() {\n    return this.registerForm.get('password');\n  }\n  get username() {\n    return this.registerForm.get('username');\n  }\n  ngOnInit() {\n    this.initialState.subscribe(user => {\n      this.registerForm = this.fb.group({\n        username: [user.username, [Validators.required]],\n        email: [user.email, [Validators.required]],\n        phoneNumber: [user.phoneNumber, [Validators.required]],\n        password: [user.password, [Validators.required]]\n      });\n    });\n    this.registerForm.valueChanges.subscribe(val => {\n      this.formValuesChanged.emit(val);\n    });\n  }\n  submitForm() {\n    console.log(this.registerForm.value);\n    this.userReg(this.registerForm.value);\n  }\n  userReg(user) {\n    this.userService.createUser(user).subscribe({\n      next: () => {\n        alert(\"Registerd succefully\");\n        //this.router.navigate(['/login']);\n      },\n\n      error: error => {\n        alert(\"Failed to create user\");\n      }\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.UserService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  inputs: {\n    initialState: \"initialState\"\n  },\n  outputs: {\n    formValuesChanged: \"formValuesChanged\",\n    formSubmitted: \"formSubmitted\"\n  },\n  decls: 29,\n  vars: 1,\n  consts: [[1, \"pt-5\"], [1, \"container\", \"login-bg\"], [1, \"row\"], [1, \"col-md-5\", \"mx-auto\"], [1, \"card\", \"card-body\"], [\"id\", \"submitForm\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"required\"], [\"for\", \"username\"], [\"type\", \"text\", \"id\", \"firstname\", \"formControlName\", \"firstname\", \"name\", \"username\", \"required\", \"\", 1, \"form-control\", \"text-lowercase\"], [\"type\", \"text\", \"id\", \"username\", \"formControlName\", \"username\", \"name\", \"username\", \"required\", \"\", 1, \"form-control\", \"text-lowercase\"], [\"type\", \"text\", \"id\", \"phoneNumber\", \"formControlName\", \"phoneNumber\", \"name\", \"phoneNumber\", \"required\", \"\", 1, \"form-control\", \"text-lowercase\"], [\"for\", \"password\", 1, \"d-flex\", \"flex-row\", \"align-items-center\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", \"name\", \"password\", \"required\", \"\", 1, \"form-control\"], [\"type\", \"password\", \"id\", \"password2\", \"formControlName\", \"password2\", \"name\", \"password2\", \"required\", \"\", 1, \"form-control\"], [1, \"form-group\", \"pt-1\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"form\", 5);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(6, \"div\", 6)(7, \"label\", 7);\n      i0.ɵɵtext(8, \"First name \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 6)(11, \"label\", 7);\n      i0.ɵɵtext(12, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 6)(15, \"label\", 7);\n      i0.ɵɵtext(16, \"Phone No\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 6)(19, \"label\", 11);\n      i0.ɵɵtext(20, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\", 6)(23, \"label\", 11);\n      i0.ɵɵtext(24, \"Confirm Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(25, \"input\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"div\", 14)(27, \"button\", 15);\n      i0.ɵɵtext(28, \"Sign up\");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"body[_ngcontent-%COMP%]{\\r\\n    background: #E8D426 !important;\\r\\n    font-family: 'Muli', sans-serif;\\r\\n    \\r\\n  }\\r\\n\\r\\n  h1[_ngcontent-%COMP%]{\\r\\n    color: #fff;\\r\\n    padding-bottom: 2rem;\\r\\n    font-weight: bold;\\r\\n  }\\r\\n  a[_ngcontent-%COMP%]{\\r\\n    color: #333;\\r\\n  }\\r\\n  a[_ngcontent-%COMP%]:hover{\\r\\n    color: #25d1c9;\\r\\n    text-decoration: none;\\r\\n  }\\r\\n  .form-control[_ngcontent-%COMP%]:focus{\\r\\n  \\r\\n      color: #000;\\r\\n      background-color: #fff;\\r\\n      border:2px solid #E8D426;\\r\\n      outline: 0;\\r\\n      box-shadow: none;\\r\\n  \\r\\n  }\\r\\n  \\r\\n  .btn[_ngcontent-%COMP%]{\\r\\n    background: #E8D426;\\r\\n    border: #E8D426;\\r\\n    \\r\\n  }\\r\\n  .btn[_ngcontent-%COMP%]:hover {\\r\\n    background: #E8D426;\\r\\n    border: #E8D426;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLDhCQUE4QjtJQUM5QiwrQkFBK0I7O0VBRWpDOztFQUVBO0lBQ0UsV0FBVztJQUNYLG9CQUFvQjtJQUNwQixpQkFBaUI7RUFDbkI7RUFDQTtJQUNFLFdBQVc7RUFDYjtFQUNBO0lBQ0UsY0FBYztJQUNkLHFCQUFxQjtFQUN2QjtFQUNBOztNQUVJLFdBQVc7TUFDWCxzQkFBc0I7TUFDdEIsd0JBQXdCO01BQ3hCLFVBQVU7TUFDVixnQkFBZ0I7O0VBRXBCOztFQUVBO0lBQ0UsbUJBQW1CO0lBQ25CLGVBQWU7O0VBRWpCO0VBQ0E7SUFDRSxtQkFBbUI7SUFDbkIsZUFBZTtFQUNqQiIsInNvdXJjZXNDb250ZW50IjpbImJvZHl7XHJcbiAgICBiYWNrZ3JvdW5kOiAjRThENDI2ICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LWZhbWlseTogJ011bGknLCBzYW5zLXNlcmlmO1xyXG4gICAgXHJcbiAgfVxyXG5cclxuICBoMXtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgcGFkZGluZy1ib3R0b206IDJyZW07XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcbiAgYXtcclxuICAgIGNvbG9yOiAjMzMzO1xyXG4gIH1cclxuICBhOmhvdmVye1xyXG4gICAgY29sb3I6ICMyNWQxYzk7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgfVxyXG4gIC5mb3JtLWNvbnRyb2w6Zm9jdXN7XHJcbiAgXHJcbiAgICAgIGNvbG9yOiAjMDAwO1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgICBib3JkZXI6MnB4IHNvbGlkICNFOEQ0MjY7XHJcbiAgICAgIG91dGxpbmU6IDA7XHJcbiAgICAgIGJveC1zaGFkb3c6IG5vbmU7XHJcbiAgXHJcbiAgfVxyXG4gIFxyXG4gIC5idG57XHJcbiAgICBiYWNrZ3JvdW5kOiAjRThENDI2O1xyXG4gICAgYm9yZGVyOiAjRThENDI2O1xyXG4gICAgXHJcbiAgfVxyXG4gIC5idG46aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZDogI0U4RDQyNjtcclxuICAgIGJvcmRlcjogI0U4RDQyNjtcclxuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","FormGroup","Validators","BehaviorSubject","RegisterComponent","constructor","fb","router","userService","name","registerForm","get","phoneNumber","email","password","username","ngOnInit","initialState","subscribe","user","group","required","valueChanges","val","formValuesChanged","emit","submitForm","console","log","value","userReg","createUser","next","alert","error","selectors","inputs","outputs","formSubmitted","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["F:\\Full stack devolopment 2\\mean-stack\\mean-stack-example\\client\\src\\app\\register\\register.component.ts","F:\\Full stack devolopment 2\\mean-stack\\mean-stack-example\\client\\src\\app\\register\\register.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { User } from '../user';\nimport { UserService } from '../user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  @Input()\n  initialState: BehaviorSubject<User> = new BehaviorSubject({});\n  \n  @Output()\n  formValuesChanged = new EventEmitter<User>();\n  \n  @Output()\n  formSubmitted = new EventEmitter<User>();\n  \n  registerForm: FormGroup = new FormGroup({});\n\n  constructor(private fb: FormBuilder, private router: Router,private userService: UserService) { }\n  get name() { return this.registerForm.get('name')!; }\n  get phoneNumber() { return this.registerForm.get('phoneNumber')!; }\n  get email() { return this.registerForm.get('email')!; }\n  get password() { return this.registerForm.get('password')!; }\n  get username() { return this.registerForm.get('username')!; }\n\n  ngOnInit() {\n    this.initialState.subscribe(user => {\n      this.registerForm = this.fb.group({\n        username: [ user.username, [Validators.required] ],\n        email: [ user.email, [Validators.required] ],\n        phoneNumber: [ user.phoneNumber, [Validators.required] ],\n        password: [ user.password, [ Validators.required ] ]\n      });\n    });\n  \n    this.registerForm.valueChanges.subscribe((val) => { this.formValuesChanged.emit(val); });\n  }\n\n  submitForm() {\n    console.log(this.registerForm.value);\n    this.userReg(this.registerForm.value);\n  }\n\n  userReg(user: User) {\n    this.userService.createUser(user)\n      .subscribe({\n        next: () => {\n          alert(\"Registerd succefully\");\n          //this.router.navigate(['/login']);\n        },\n        error: (error) => {\n          alert(\"Failed to create user\");\n        }\n      });\n  }\n}","<div class=\"pt-5\">\r\n    <!--<h1 class=\"text-center\">HTML Login Page with Bootstrap Example</h1>-->\r\n    \r\n  <div class=\"container login-bg\">\r\n                  <div class=\"row\">\r\n                      <div class=\"col-md-5 mx-auto\">\r\n                          <div class=\"card card-body\">\r\n                                                      \r\n                              <form id=\"submitForm\" [formGroup]=\"registerForm\" (ngSubmit)=\"submitForm()\"  >\r\n                            \r\n                                  <div class=\"form-group required\">\r\n                                      <label for=\"username\">First name </label>\r\n                                      <input type=\"text\" class=\"form-control text-lowercase\" id=\"firstname\" formControlName=\"firstname\" name=\"username\" required>\r\n                                  </div> \r\n\r\n                                  <div class=\"form-group required\">\r\n                                    <label for=\"username\">Username</label>\r\n                                    <input type=\"text\" class=\"form-control text-lowercase\" id=\"username\" formControlName=\"username\" name=\"username\" required>\r\n                                  </div>\r\n                                  \r\n                                  <div class=\"form-group required\">\r\n                                    <label for=\"username\">Phone No</label>\r\n                                    <input type=\"text\" class=\"form-control text-lowercase\" id=\"phoneNumber\" formControlName=\"phoneNumber\" name=\"phoneNumber\" required>\r\n                                  </div> \r\n\r\n                                  <div class=\"form-group required\">\r\n                                      <label class=\"d-flex flex-row align-items-center\" for=\"password\">Password</label>\r\n                                      <input type=\"password\" class=\"form-control\"  id=\"password\" formControlName=\"password\" name=\"password\" required>\r\n                                  </div>\r\n\r\n                                  <div class=\"form-group required\">\r\n                                    <label class=\"d-flex flex-row align-items-center\" for=\"password\">Confirm Password</label>\r\n                                    <input type=\"password\" class=\"form-control\"  id=\"password2\" formControlName=\"password2\" name=\"password2\" required>\r\n                                </div>\r\n\r\n                                  \r\n                                  <div class=\"form-group pt-1\">\r\n                                      <button class=\"btn btn-primary btn-block\" type=\"submit\">Sign up</button>\r\n                                  </div>\r\n                              </form>\r\n\r\n                          </div>\r\n                      </div>\r\n                  </div>\r\n   </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}